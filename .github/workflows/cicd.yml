name: Deploy next.js application to AWS EC2

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check current server
      run: |
        STATUS=$(curl -o /dev/null -w "%{http_code}" "https://${{ secrets.DOMAIN }}/hc/env")
        echo $STATUS
        if [ $STATUS = 200 ]; then
          CURRENT_UPSTREAM=$(curl -s "https://${{ secrets.DOMAIN }}/hc/env")
          if [ "$CURRENT_UPSTREAM" = "alpha" ]; then
            CURRENT_ENV=beta
          elif [ "$CURRENT_UPSTREAM" = "beta" ]; then
            CURRENT_ENV=alpha
          fi
        else
          CURRENT_ENV=alpha
        fi
        echo CURRENT_ENV=$CURRENT_ENV >> $GITHUB_ENV

    - name: Create .env.production
      run: |
        echo "API_URL=${{ secrets.NEXT_API_URL }}" >> .env.production
        echo "ENV=${{env.CURRENT_ENV}}" >> .env.production

    - name: login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build the Docker image
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/bookstore-client .

    - name: docker hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/bookstore-client

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Set target IP
        run: |
          STATUS=$(curl -o /dev/null -w "%{http_code}" "https://${{ secrets.DOMAIN }}/hc/env")
          echo $STATUS
          if [ $STATUS = 200 ]; then
            CURRENT_UPSTREAM=$(curl -s "https://${{ secrets.DOMAIN }}/hc/env")
          else
            CURRENT_UPSTREAM=beta
          fi
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
          if [ $CURRENT_UPSTREAM = alpha ]; then
            echo "CURRENT_PORT=3000" >> $GITHUB_ENV
            echo "STOPPED_PORT=3001" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=beta" >> $GITHUB_ENV
          else
            echo "CURRENT_PORT=3001" >> $GITHUB_ENV
            echo "STOPPED_PORT=3000" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=alpha" >> $GITHUB_ENV
          fi

      - name: Docker compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/bookstore-client:latest
            sudo docker-compose -f docker-compose-${{env.TARGET_UPSTREAM}}.yml up -d

      - name: Check deploy server URL
        uses: jtalk/url-health-check-action@v4
        with:
          url: http://${{ secrets.LIVE_SERVER_IP }}:${{env.STOPPED_PORT}}/
          max-attempts: 3
          retry-delay: 10s
          
      - name: Change nginx upstream
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginxserver bash -c 'sed -i "s/set \$service_url .*/set \$service_url ${{ env.TARGET_UPSTREAM }};/" /etc/nginx/conf.d/service-env.inc && nginx -s reload'

      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            echo "Stopping current container: ${{env.CURRENT_UPSTREAM}}"
            sudo docker stop ${{env.CURRENT_UPSTREAM}} 2>/dev/null || true
            echo "Removing current container: ${{env.CURRENT_UPSTREAM}}"
            sudo docker rm ${{env.CURRENT_UPSTREAM}} 2>/dev/null || true
            sudo docker image prune -a -f    
          
